{
    "contents" : "## With these two functions one can cache the inverse of a matrix\n## to avoid computing the same inverse again, if the original matrix has not changed\n\n\n## 1) makeCacheMatrix:\n## This function creates a special \"matrix\" object that can cache its inverse\n## It creates a special \"vector\", which is actually a list containing a function to\n## - set the value of the matrix\n## - get the value of the matrix\n## - set the value of the inverse\n## - get the value of the inverse\n## Assumption: Make sure the matrix you submit to the function is ivertible!\n\nmakeCacheMatrix <- function(x = matrix()) {\n    m <- NULL\n    set <- function(y) {\n        x <<- y\n        m <<- NULL\n    }\n    get <- function() x\n    setinverse <- function(inverse) m <<- inverse\n    getinverse <- function() m\n    #List of all functions, which is necessary to get all\n    list(set = set, get = get,\n         setinverse = setinverse,\n         getinverse = getinverse)\n}\n\n\n## 2) cacheSolve: \n## This function calculates the inverse of the special \"matrix\" created with the function above. \n## It checks first, if the inverse has already been calculated.\n## If so, it gets the inverse from the cache and skips the computation. \n## Otherwise, it calculates the inverse of the data (using solve()) and \n## sets the value of the inverse in the cache via the setinverse function.\n\ncacheSolve <- function(x, ...) {\n    ## Return a matrix that is the inverse of 'x'\n    m <- x$getinverse()\n    if(!is.null(m)) {\n        message(\"getting cached data\")\n        return(m)\n    }\n    data <- x$get()\n    m <- solve(data)\n    x$setinverse(m)\n    m\n}\n\n## Example matrix for testing\n## remove \"#\" for testing\n# X <- matrix(rnorm(9), 3)\n# X\n# mCM <- makeCacheMatrix(X)\n# IX <- cacheSolve(mCM)\n# IX",
    "created" : 1432040455521.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2128820360",
    "id" : "A7CF2E3F",
    "lastKnownWriteTime" : 1432053174,
    "path" : "C:/Users/Christopher Koch/Repos/ProgrammingAssignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}